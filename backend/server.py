from fastapi import FastAPI, APIRouter, HTTPException, Depends, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import uuid
from datetime import datetime
from enum import Enum
import jwt
import hashlib
from shopify_integration import shopify_integration

ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db = client[os.environ['DB_NAME']]

# Create the main app without a prefix
app = FastAPI(title="ConfianceBoost API", version="1.0.0")

# Create a router with the /api prefix
api_router = APIRouter(prefix="/api")

# Security
security = HTTPBearer()
JWT_SECRET = "confianceboost-secret-key-2025"

# Enums
class ModuleStatus(str, Enum):
    NOT_STARTED = "not_started"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"

class UserRole(str, Enum):
    STUDENT = "student"
    ADMIN = "admin"

# Models
class User(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    email: str
    password_hash: str
    first_name: str
    last_name: str
    role: UserRole = UserRole.STUDENT
    registration_date: datetime = Field(default_factory=datetime.utcnow)
    total_study_time: int = 0  # in minutes
    certificates_earned: int = 0
    is_premium: bool = False

class UserCreate(BaseModel):
    email: str
    password: str
    first_name: str
    last_name: str

class UserLogin(BaseModel):
    email: str
    password: str

class Lesson(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    title: str
    duration: int  # in minutes
    content: str
    video_url: Optional[str] = None
    order: int

class Exercise(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    title: str
    description: str
    instructions: str
    type: str  # "reflection", "practical", "written"

class Module(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    title: str
    description: str
    duration: int  # total duration in minutes
    lessons_count: int
    lessons: List[Lesson]
    exercises: List[Exercise]
    resources: List[str]
    order: int
    icon: str
    color: str

class UserProgress(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    user_id: str
    module_id: str
    status: ModuleStatus = ModuleStatus.NOT_STARTED
    completed_lessons: List[str] = []
    completed_exercises: List[str] = []
    start_date: Optional[datetime] = None
    completion_date: Optional[datetime] = None
    progress_percentage: int = 0
    time_spent: int = 0  # in minutes

class Certificate(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    user_id: str
    module_id: str
    issued_date: datetime = Field(default_factory=datetime.utcnow)
    certificate_url: str

class Stats(BaseModel):
    total_users: int
    total_modules: int
    total_certificates: int
    average_completion_rate: float

# Helper functions
def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()

def verify_password(password: str, hashed: str) -> bool:
    return hash_password(password) == hashed

def create_token(user_id: str) -> str:
    return jwt.encode({"user_id": user_id}, JWT_SECRET, algorithm="HS256")

async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):
    try:
        token = credentials.credentials
        payload = jwt.decode(token, JWT_SECRET, algorithms=["HS256"])
        user_id = payload.get("user_id")
        user = await db.users.find_one({"id": user_id})
        if not user:
            raise HTTPException(status_code=401, detail="User not found")
        return User(**user)
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Invalid token")

# Initialize modules data
async def init_modules():
    modules_count = await db.modules.count_documents({})
    if modules_count == 0:
        modules_data = [
            {
                "id": str(uuid.uuid4()),
                "title": "Comprendre sa valeur personnelle",
                "description": "D√©couvrez votre valeur intrins√®que et apprenez √† la reconna√Ætre dans toutes les situations.",
                "duration": 45,
                "lessons_count": 6,
                "order": 1,
                "icon": "üë§",
                "color": "bg-gradient-to-r from-yellow-400 to-yellow-600",
                "lessons": [
                    {"id": str(uuid.uuid4()), "title": "Qu'est-ce que la valeur personnelle ?", "duration": 8, "content": "La valeur personnelle est la reconnaissance de votre worth intrins√®que en tant qu'√™tre humain, ind√©pendamment de vos r√©ussites ou √©checs.", "order": 1},
                    {"id": str(uuid.uuid4()), "title": "Identifier vos forces uniques", "duration": 10, "content": "Chaque personne poss√®de des qualit√©s et talents uniques. Apprendre √† les identifier est crucial pour construire une confiance solide.", "order": 2},
                    {"id": str(uuid.uuid4()), "title": "Comprendre l'autocritique destructive", "duration": 7, "content": "L'autocritique excessive peut d√©truire notre estime de soi. Apprenez √† distinguer la critique constructive de la destructive.", "order": 3},
                    {"id": str(uuid.uuid4()), "title": "D√©velopper l'auto-compassion", "duration": 8, "content": "L'auto-compassion consiste √† se traiter avec la m√™me bienveillance qu'on traiterait un bon ami en difficult√©.", "order": 4},
                    {"id": str(uuid.uuid4()), "title": "Vos valeurs fondamentales", "duration": 6, "content": "Identifiez vos valeurs profondes pour aligner vos actions avec ce qui compte vraiment pour vous.", "order": 5},
                    {"id": str(uuid.uuid4()), "title": "C√©l√©brer ses victoires", "duration": 6, "content": "Apprendre √† reconna√Ætre et c√©l√©brer vos succ√®s, m√™me les plus petits, renforce votre confiance.", "order": 6}
                ],
                "exercises": [
                    {"id": str(uuid.uuid4()), "title": "Journal de gratitude personnelle", "description": "Notez 3 choses que vous appr√©ciez chez vous", "instructions": "Chaque soir, √©crivez 3 qualit√©s ou actions dont vous √™tes fier(e) aujourd'hui", "type": "written"},
                    {"id": str(uuid.uuid4()), "title": "Inventaire des forces", "description": "Listez vos 10 principales qualit√©s", "instructions": "Demandez √† 3 proches de vous aider √† identifier vos forces", "type": "practical"}
                ],
                "resources": ["Guide PDF: Comprendre sa valeur", "M√©ditation guid√©e de 10 min", "Checklist d'auto-√©valuation"]
            },
            {
                "id": str(uuid.uuid4()),
                "title": "Surmonter le syndrome de l'imposteur",
                "description": "Lib√©rez-vous de cette voix int√©rieure qui vous dit que vous ne m√©ritez pas votre succ√®s.",
                "duration": 60,
                "lessons_count": 8,
                "order": 2,
                "icon": "üé≠",
                "color": "bg-gradient-to-r from-purple-400 to-purple-600",
                "lessons": [
                    {"id": str(uuid.uuid4()), "title": "Qu'est-ce que le syndrome de l'imposteur ?", "duration": 8, "content": "Le syndrome de l'imposteur est cette sensation persistante d'√™tre un fraudeur, malgr√© des preuves objectives de comp√©tence.", "order": 1},
                    {"id": str(uuid.uuid4()), "title": "Les 5 types d'imposteurs", "duration": 10, "content": "Perfectionniste, Expert, Soliste, G√©nie naturel, Surhomme/Superfemme - identifiez votre profil.", "order": 2},
                    {"id": str(uuid.uuid4()), "title": "Les d√©clencheurs √©motionnels", "duration": 7, "content": "Reconnaissez les situations qui activent votre syndrome de l'imposteur pour mieux les anticiper.", "order": 3},
                    {"id": str(uuid.uuid4()), "title": "Restructurer ses pens√©es", "duration": 8, "content": "Techniques pour challenger et remplacer les pens√©es d'imposteur par des pens√©es r√©alistes et bienveillantes.", "order": 4},
                    {"id": str(uuid.uuid4()), "title": "Documenter ses succ√®s", "duration": 7, "content": "Cr√©ez un 'dossier de fiert√©' pour collecter preuves de vos r√©ussites et comp√©tences.", "order": 5},
                    {"id": str(uuid.uuid4()), "title": "Accepter les compliments", "duration": 6, "content": "Apprenez √† recevoir les compliments sans les minimiser ou les rejeter automatiquement.", "order": 6},
                    {"id": str(uuid.uuid4()), "title": "Partager ses doutes", "duration": 7, "content": "D√©couvrez comment parler de vos doutes peut les d√©sarmer et cr√©er des connexions authentiques.", "order": 7},
                    {"id": str(uuid.uuid4()), "title": "Red√©finir l'√©chec", "duration": 7, "content": "Transformez votre relation √† l'√©chec : d'ennemi √† alli√© dans votre d√©veloppement personnel.", "order": 8}
                ],
                "exercises": [
                    {"id": str(uuid.uuid4()), "title": "Test du syndrome de l'imposteur", "description": "√âvaluez votre niveau de syndrome", "instructions": "R√©pondez honn√™tement aux 20 questions du questionnaire", "type": "reflection"},
                    {"id": str(uuid.uuid4()), "title": "Dossier de r√©ussites", "description": "Compilez vos preuves de comp√©tence", "instructions": "Rassemblez emails de remerciements, √©valuations positives, projets r√©ussis", "type": "practical"}
                ],
                "resources": ["Questionnaire d'auto-√©valuation", "Template dossier de r√©ussites", "Audio: Affirmations anti-imposteur"]
            },
            {
                "id": str(uuid.uuid4()),
                "title": "D√©velopper son assertivit√©",
                "description": "Apprenez √† exprimer vos besoins et opinions avec respect et fermet√©.",
                "duration": 50,
                "lessons_count": 7,
                "order": 3,
                "icon": "üí™",
                "color": "bg-gradient-to-r from-green-400 to-green-600",
                "lessons": [
                    {"id": str(uuid.uuid4()), "title": "Assertivit√© vs agressivit√© vs passivit√©", "duration": 8, "content": "Comprendre les diff√©rences fondamentales entre ces trois modes de communication.", "order": 1},
                    {"id": str(uuid.uuid4()), "title": "Identifier son style de communication", "duration": 7, "content": "Auto-√©valuation pour reconna√Ætre vos patterns de communication actuels.", "order": 2},
                    {"id": str(uuid.uuid4()), "title": "La technique du disque ray√©", "duration": 6, "content": "Apprenez √† maintenir votre position calmement face √† la pression ou manipulation.", "order": 3},
                    {"id": str(uuid.uuid4()), "title": "Dire non avec bienveillance", "duration": 8, "content": "Techniques pratiques pour refuser des demandes sans culpabilit√© ni agressivit√©.", "order": 4},
                    {"id": str(uuid.uuid4()), "title": "Exprimer ses besoins clairement", "duration": 7, "content": "Formuler des demandes pr√©cises et r√©alisables pour obtenir ce dont vous avez besoin.", "order": 5},
                    {"id": str(uuid.uuid4()), "title": "G√©rer les critiques constructivement", "duration": 7, "content": "Recevoir et donner des feedbacks de mani√®re assertive et bienveillante.", "order": 6},
                    {"id": str(uuid.uuid4()), "title": "Assertivit√© en situation de conflit", "duration": 7, "content": "Maintenir son assertivit√© m√™me dans les situations tendues ou conflictuelles.", "order": 7}
                ],
                "exercises": [
                    {"id": str(uuid.uuid4()), "title": "Journal d'assertivit√©", "description": "Notez vos situations d'assertivit√© quotidiennes", "instructions": "Chaque soir, analysez 2 situations o√π vous avez √©t√© (ou pas) assertif", "type": "written"},
                    {"id": str(uuid.uuid4()), "title": "Jeux de r√¥le", "description": "Pratiquez l'assertivit√© en situation", "instructions": "Utilisez nos 10 sc√©narios pour vous entra√Æner", "type": "practical"}
                ],
                "resources": ["Scripts de phrases assertives", "Vid√©o: Langage corporel assertif", "Checklist avant conversation difficile"]
            },
            {
                "id": str(uuid.uuid4()),
                "title": "G√©rer l'anxi√©t√© sociale",
                "description": "Surmontez votre peur du jugement et d√©veloppez votre aisance sociale.",
                "duration": 55,
                "lessons_count": 6,
                "order": 4,
                "icon": "üåü",
                "color": "bg-gradient-to-r from-blue-400 to-blue-600",
                "lessons": [
                    {"id": str(uuid.uuid4()), "title": "Comprendre l'anxi√©t√© sociale", "duration": 10, "content": "Les m√©canismes psychologiques et physiologiques de l'anxi√©t√© en situation sociale.", "order": 1},
                    {"id": str(uuid.uuid4()), "title": "Identifier vos d√©clencheurs", "duration": 9, "content": "Mapping personnel de vos situations anxiog√®nes pour mieux les anticiper.", "order": 2},
                    {"id": str(uuid.uuid4()), "title": "Techniques de respiration anti-stress", "duration": 8, "content": "M√©thodes de respiration pour calmer instantan√©ment votre syst√®me nerveux.", "order": 3},
                    {"id": str(uuid.uuid4()), "title": "Restructuration cognitive", "duration": 10, "content": "Changer vos pens√©es automatiques n√©gatives en pens√©es plus r√©alistes et apaisantes.", "order": 4},
                    {"id": str(uuid.uuid4()), "title": "Exposition progressive", "duration": 9, "content": "Approche graduelle pour vous exposer aux situations sociales avec succ√®s.", "order": 5},
                    {"id": str(uuid.uuid4()), "title": "D√©velopper ses comp√©tences sociales", "duration": 9, "content": "Techniques concr√®tes pour am√©liorer vos interactions et conversations.", "order": 6}
                ],
                "exercises": [
                    {"id": str(uuid.uuid4()), "title": "√âchelle d'exposition graduelle", "description": "Cr√©ez votre plan d'exposition personnalis√©", "instructions": "Listez 10 situations de la moins √† la plus anxiog√®ne", "type": "practical"},
                    {"id": str(uuid.uuid4()), "title": "Journal des pens√©es", "description": "Tracez vos pens√©es anxieuses", "instructions": "Notez pens√©e automatique ‚Üí √©motion ‚Üí pens√©e alternative", "type": "written"}
                ],
                "resources": ["Audio: M√©ditation anti-anxi√©t√©", "Guide des signaux sociaux", "Exercices de respiration"]
            },
            {
                "id": str(uuid.uuid4()),
                "title": "Cultiver l'estime de soi",
                "description": "Construisez une estime de soi solide et durable, ind√©pendante du regard des autres.",
                "duration": 65,
                "lessons_count": 9,
                "order": 5,
                "icon": "‚ù§Ô∏è",
                "color": "bg-gradient-to-r from-pink-400 to-pink-600",
                "lessons": [
                    {"id": str(uuid.uuid4()), "title": "Diff√©rence entre estime et confiance", "duration": 7, "content": "Comprendre la distinction cruciale entre estime de soi et confiance en soi.", "order": 1},
                    {"id": str(uuid.uuid4()), "title": "Les piliers de l'estime de soi", "duration": 8, "content": "Les 6 piliers fondamentaux selon Nathaniel Branden pour construire une estime solide.", "order": 2},
                    {"id": str(uuid.uuid4()), "title": "Auto-acceptation inconditionnelle", "duration": 7, "content": "Apprendre √† s'accepter pleinement, avec ses qualit√©s et ses d√©fauts.", "order": 3},
                    {"id": str(uuid.uuid4()), "title": "Sortir de la comparaison", "duration": 8, "content": "Techniques pour arr√™ter de se comparer constamment aux autres.", "order": 4},
                    {"id": str(uuid.uuid4()), "title": "Dialogue int√©rieur bienveillant", "duration": 7, "content": "Transformer votre critique int√©rieur en alli√© bienveillant et encourageant.", "order": 5},
                    {"id": str(uuid.uuid4()), "title": "Fixer des limites saines", "duration": 8, "content": "Prot√©ger votre estime en √©tablissant des boundaries claires avec les autres.", "order": 6},
                    {"id": str(uuid.uuid4()), "title": "Prendre soin de soi", "duration": 7, "content": "L'importance de l'auto-soin dans le d√©veloppement de l'estime de soi.", "order": 7},
                    {"id": str(uuid.uuid4()), "title": "Construire sur ses r√©ussites", "duration": 6, "content": "Utiliser vos succ√®s pass√©s comme fondation pour votre estime future.", "order": 8},
                    {"id": str(uuid.uuid4()), "title": "Maintenir l'estime au quotidien", "duration": 7, "content": "Rituels et habitudes pour entretenir votre estime de soi jour apr√®s jour.", "order": 9}
                ],
                "exercises": [
                    {"id": str(uuid.uuid4()), "title": "Lettre √† soi-m√™me", "description": "√âcrivez une lettre bienveillante √† votre futur vous", "instructions": "R√©digez avec compassion comme √† votre meilleur ami", "type": "written"},
                    {"id": str(uuid.uuid4()), "title": "Rituel matinal d'estime", "description": "Cr√©ez votre routine quotidienne", "instructions": "5 minutes chaque matin d'affirmations personnalis√©es", "type": "practical"}
                ],
                "resources": ["Template lettre √† soi", "21 affirmations puissantes", "Tracker d'estime quotidien"]
            },
            {
                "id": str(uuid.uuid4()),
                "title": "Prendre des d√©cisions avec confiance",
                "description": "D√©veloppez votre capacit√© √† prendre des d√©cisions align√©es et assum√©es.",
                "duration": 40,
                "lessons_count": 5,
                "order": 6,
                "icon": "üéØ",
                "color": "bg-gradient-to-r from-red-400 to-red-600",
                "lessons": [
                    {"id": str(uuid.uuid4()), "title": "Anatomie d'une d√©cision", "duration": 8, "content": "Comprendre les composants √©motionnels et rationnels de la prise de d√©cision.", "order": 1},
                    {"id": str(uuid.uuid4()), "title": "Surmonter la paralysie d√©cisionnelle", "duration": 10, "content": "Techniques pour d√©bloquer les situations o√π vous n'arrivez pas √† choisir.", "order": 2},
                    {"id": str(uuid.uuid4()), "title": "M√©thodes de prise de d√©cision", "duration": 8, "content": "Outils pratiques : matrice de d√©cision, pros/cons pond√©r√©s, r√®gle 10-10-10.", "order": 3},
                    {"id": str(uuid.uuid4()), "title": "√âcouter son intuition", "duration": 7, "content": "Apprendre √† faire confiance √† votre sagesse int√©rieure tout en restant rationnel.", "order": 4},
                    {"id": str(uuid.uuid4()), "title": "Assumer ses choix", "duration": 7, "content": "Comment vivre avec ses d√©cisions et apprendre de celles qui ne donnent pas les r√©sultats esp√©r√©s.", "order": 5}
                ],
                "exercises": [
                    {"id": str(uuid.uuid4()), "title": "Journal de d√©cisions", "description": "Tracez vos d√©cisions et leurs r√©sultats", "instructions": "Notez d√©cision ‚Üí crit√®res ‚Üí r√©sultat ‚Üí apprentissage", "type": "written"},
                    {"id": str(uuid.uuid4()), "title": "Challenge 30 jours", "description": "Prenez une petite d√©cision rapide chaque jour", "instructions": "R√©duisez progressivement votre temps de r√©flexion", "type": "practical"}
                ],
                "resources": ["Matrice de d√©cision Excel", "Quiz: Quel d√©cideur √™tes-vous?", "Checklist avant grande d√©cision"]
            }
        ]
        
        await db.modules.insert_many(modules_data)
        print("Modules initialized successfully")

# Authentication endpoints
@api_router.post("/auth/register")
async def register(user_data: UserCreate):
    # Check if user exists
    existing_user = await db.users.find_one({"email": user_data.email})
    if existing_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    
    # Create user
    user_dict = user_data.dict()
    user_dict["password_hash"] = hash_password(user_data.password)
    del user_dict["password"]
    user_obj = User(**user_dict)
    
    await db.users.insert_one(user_obj.dict())
    
    # Create initial progress for all modules
    modules = await db.modules.find().to_list(1000)
    progress_data = []
    for module in modules:
        progress = UserProgress(
            user_id=user_obj.id,
            module_id=module["id"],
            status=ModuleStatus.NOT_STARTED
        )
        progress_data.append(progress.dict())
    
    if progress_data:
        await db.user_progress.insert_many(progress_data)
    
    token = create_token(user_obj.id)
    return {"token": token, "user": user_obj}

@api_router.post("/auth/login")
async def login(login_data: UserLogin):
    user = await db.users.find_one({"email": login_data.email})
    if not user or not verify_password(login_data.password, user["password_hash"]):
        raise HTTPException(status_code=401, detail="Invalid credentials")
    
    token = create_token(user["id"])
    user_obj = User(**user)
    return {"token": token, "user": user_obj}

# Modules endpoints
@api_router.get("/modules", response_model=List[Module])
async def get_modules():
    modules = await db.modules.find().sort("order", 1).to_list(1000)
    return [Module(**module) for module in modules]

@api_router.get("/modules/{module_id}", response_model=Module)
async def get_module(module_id: str):
    module = await db.modules.find_one({"id": module_id})
    if not module:
        raise HTTPException(status_code=404, detail="Module not found")
    return Module(**module)

# User progress endpoints
@api_router.get("/progress")
async def get_user_progress(current_user: User = Depends(get_current_user)):
    progress = await db.user_progress.find({"user_id": current_user.id}).to_list(1000)
    return [UserProgress(**p) for p in progress]

@api_router.post("/progress/{module_id}/start")
async def start_module(module_id: str, current_user: User = Depends(get_current_user)):
    # Update progress
    update_data = {
        "status": ModuleStatus.IN_PROGRESS,
        "start_date": datetime.utcnow()
    }
    
    result = await db.user_progress.update_one(
        {"user_id": current_user.id, "module_id": module_id},
        {"$set": update_data}
    )
    
    if result.matched_count == 0:
        raise HTTPException(status_code=404, detail="Progress not found")
    
    return {"message": "Module started successfully"}

@api_router.post("/progress/{module_id}/complete-lesson/{lesson_id}")
async def complete_lesson(
    module_id: str, 
    lesson_id: str, 
    current_user: User = Depends(get_current_user)
):
    # Get current progress
    progress = await db.user_progress.find_one({
        "user_id": current_user.id, 
        "module_id": module_id
    })
    
    if not progress:
        raise HTTPException(status_code=404, detail="Progress not found")
    
    # Add lesson to completed if not already there
    completed_lessons = progress.get("completed_lessons", [])
    if lesson_id not in completed_lessons:
        completed_lessons.append(lesson_id)
    
    # Get module to calculate progress
    module = await db.modules.find_one({"id": module_id})
    if module:
        total_lessons = len(module.get("lessons", []))
        progress_percentage = int((len(completed_lessons) / total_lessons) * 100) if total_lessons > 0 else 0
        
        # Check if module is completed
        status = ModuleStatus.COMPLETED if progress_percentage == 100 else ModuleStatus.IN_PROGRESS
        completion_date = datetime.utcnow() if status == ModuleStatus.COMPLETED else None
        
        update_data = {
            "completed_lessons": completed_lessons,
            "progress_percentage": progress_percentage,
            "status": status
        }
        
        if completion_date:
            update_data["completion_date"] = completion_date
        
        await db.user_progress.update_one(
            {"user_id": current_user.id, "module_id": module_id},
            {"$set": update_data}
        )
        
        # Create certificate if completed
        if status == ModuleStatus.COMPLETED:
            certificate = Certificate(
                user_id=current_user.id,
                module_id=module_id,
                certificate_url=f"/certificates/{current_user.id}/{module_id}"
            )
            await db.certificates.insert_one(certificate.dict())
    
    return {"message": "Lesson completed successfully"}

# Dashboard endpoints
@api_router.get("/dashboard")
async def get_dashboard(current_user: User = Depends(get_current_user)):
    # Get user progress
    progress = await db.user_progress.find({"user_id": current_user.id}).to_list(1000)
    
    # Get modules
    modules = await db.modules.find().sort("order", 1).to_list(1000)
    
    # Calculate stats
    total_modules = len(modules)
    completed_modules = len([p for p in progress if p.get("status") == ModuleStatus.COMPLETED])
    in_progress_modules = len([p for p in progress if p.get("status") == ModuleStatus.IN_PROGRESS])
    
    # Get certificates
    certificates = await db.certificates.find({"user_id": current_user.id}).to_list(1000)
    
    # Combine module info with progress
    modules_with_progress = []
    for module in modules:
        module_progress = next((p for p in progress if p.get("module_id") == module["id"]), None)
        module_data = Module(**module).dict()
        if module_progress:
            module_data["progress"] = UserProgress(**module_progress).dict()
        else:
            module_data["progress"] = UserProgress(
                user_id=current_user.id,
                module_id=module["id"]
            ).dict()
        modules_with_progress.append(module_data)
    
    return {
        "user": current_user,
        "modules": modules_with_progress,
        "stats": {
            "total_modules": total_modules,
            "completed_modules": completed_modules,
            "in_progress_modules": in_progress_modules,
            "certificates_count": len(certificates),
            "total_study_time": sum([p.get("time_spent", 0) for p in progress])
        }
    }

# Payment endpoints will be added here

# Health check
@api_router.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.utcnow()}

# Include the router in the main app
app.include_router(api_router)

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@app.on_event("startup")
async def startup_event():
    await init_modules()
    logger.info("ConfianceBoost API started successfully")

@app.on_event("shutdown")
async def shutdown_db_client():
    client.close()